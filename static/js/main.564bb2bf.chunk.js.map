{"version":3,"sources":["styles/global.js","pages/Details/styles.js","store/modules/organization/actions.js","pages/Details/index.js","pages/Home/styles.js","services/history.js","pages/Home/index.js","store/modules/organizations/actions.js","pages/NotFound/styles.js","pages/NotFound/index.js","routes/index.js","store/modules/organizations/reducer.js","store/modules/organization/reducer.js","store/modules/rootReducer.js","services/api.js","store/modules/organizations/sagas.js","store/modules/organization/sagas.js","store/modules/rootSaga.js","store/index.js","store/createStore.js","App.js","serviceWorker.js","index.js"],"names":["createGlobalStyle","Container","styled","div","fetchOrganizationRequest","login","type","payload","Details","dispatch","useDispatch","useLocation","pathname","replace","organization","useSelector","state","useEffect","a","getOrganization","isLoading","items","className","src","avatar_url","alt","name","description","location","repos","length","map","repo","key","id","to","LinearProgress","history","createBrowserHistory","Home","organizations","React","useState","page","setPage","rowsPerPage","setRowsPerPage","columns","label","classes","makeStyles","root","width","container","maxHeight","useStyles","getOrganizations","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","align","style","minWidth","TableBody","slice","row","hover","role","tabIndex","onClick","push","window","reload","text","value","substring","TablePagination","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","target","NotFound","Routes","exact","path","INITIAL_STATE","combineReducers","action","err","api","axios","create","baseURL","fetchOrganizations","call","get","response","put","data","all","takeLatest","fetchOrganization","responseRepositories","rootSaga","sagaMiddleware","createSagaMiddleware","store","reducers","middlewares","enhancer","applyMiddleware","createStore","rootReducer","run","App","basename","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.564bb2bf.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.css';\r\n\r\nexport default createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n            sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n\r\n    .App {\r\n        text-align: center;\r\n        background-color: #282c34;\r\n        min-height: 100vh;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    a {\r\n        color: inherit;\r\n        \r\n        &:hover, &:focus {\r\n            text-decoration: none;\r\n            color: inherit;\r\n        }\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    max-width: 650px;\r\n    width: 100%;\r\n    padding: 20px;\r\n\r\n    .card {\r\n        display: flex;\r\n        align-items: center;\r\n        width: 100%;\r\n        max-width: 768px;\r\n        padding: 20px;\r\n\r\n        img {\r\n            max-width: 18rem;\r\n        }\r\n\r\n        .repositories {\r\n            max-height: 500px;\r\n            overflow-y: auto;\r\n        }\r\n    }\r\n`;\r\n","export const FETCH_ORGANIZATION_REQUEST = \"FETCH_ORGANIZATION_REQUEST\";\r\nexport const FETCH_ORGANIZATION_SUCCESS = \"FETCH_ORGANIZATION_SUCCESS\";\r\nexport const FETCH_ORGANIZATION_FAILURE = \"FETCH_ORGANIZATION_FAILURE\";\r\n\r\nexport function fetchOrganizationRequest(login) {\r\n    return {\r\n        type: FETCH_ORGANIZATION_REQUEST,\r\n        payload: { login },\r\n    }\r\n}\r\n\r\nexport function fetchOrganizationSuccess(organization) {\r\n    return {\r\n        type: FETCH_ORGANIZATION_SUCCESS,\r\n        payload: { organization },\r\n    }\r\n}\r\n\r\nexport function fetchOrganizationFailure(err) {\r\n    return {\r\n        type: FETCH_ORGANIZATION_FAILURE,\r\n        payload: { err }       \r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\nimport { Container } from './styles';\r\nimport { fetchOrganizationRequest } from '../../store/modules/organization/actions';\r\n\r\nfunction Details() {\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const login = location.pathname.replace('/details/', '');\r\n    const organization = useSelector(state => state.organization);\r\n\r\n    useEffect(() => {\r\n        async function getOrganization() {\r\n            await dispatch(fetchOrganizationRequest(login));\r\n        }\r\n\r\n        getOrganization();\r\n    }, [login, dispatch]);\r\n    \r\n    return (\r\n        <Container>\r\n            {!organization.isLoading && organization.items && (\r\n                <div className=\"card\">\r\n                    <img\r\n                        src={organization.items.avatar_url}\r\n                        className=\"card-img-top\"\r\n                        alt={`${organization.items.login} avatar`}\r\n                    />\r\n                    \r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{organization.items.name}</h5>\r\n\r\n                        <p className=\"card-text\">{organization.items.description}</p>\r\n\r\n                        <p className=\"card-text\">\r\n                            <small className=\"text-muted\">{organization.items.location}</small>\r\n                        </p>\r\n                    </div>\r\n\r\n                    <h5 className=\"card-title\">Repositórios</h5>\r\n\r\n                    {organization.items.repos.length > 0 && (\r\n                        <ul className=\"list-group list-group-flush repositories\">\r\n                            {organization.items.repos.map(repo => (\r\n                                <li className=\"list-group-item\" key={repo.id}>\r\n                                    <h6>{repo.name}</h6>\r\n\r\n                                    <p>{repo.description}</p>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    )}\r\n\r\n                    {organization.items.repos.length === 0 && (\r\n                        <ul className=\"list-group list-group-flush\">\r\n                            <li className=\"list-group-item\">Sem repositórios</li>\r\n                        </ul>\r\n                    )}\r\n\r\n                    <div className=\"card-body\">\r\n                        <Link to=\"/\" className=\"btn btn-primary\">Voltar</Link>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {organization.isLoading && <LinearProgress />}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Details;","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    max-width: 650px;\r\n    width: 100%;\r\n    padding: 20px;\r\n\r\n    table {\r\n        th {\r\n            font-weight: bold;\r\n        }\r\n\r\n        img {\r\n            width: 50px;\r\n            height: 50px;\r\n        }\r\n\r\n        .MuiTableCell-body {\r\n            cursor: pointer;\r\n        }\r\n    }\r\n`;\r\n","import { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    LinearProgress,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Container } from './styles';\r\nimport { fetchOrganizationsRequest } from '../../store/modules/organizations/actions';\r\nimport history from '../../services/history';\r\n\r\nfunction Home() {\r\n    const dispatch = useDispatch();\r\n    const organizations = useSelector(state => state.organizations);    \r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const columns = [\r\n        { id: 'avatar_url', label: '' },\r\n        { id: 'login', label: 'Login' },\r\n        { id: 'description', label: 'Descrição' },\r\n    ];\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        container: {\r\n            maxHeight: 440,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        async function getOrganizations() {\r\n            await dispatch(fetchOrganizationsRequest());   \r\n        }\r\n\r\n        getOrganizations();\r\n    }, [dispatch]);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n\r\n        setPage(0);\r\n    };\r\n\r\n    const checkMaxCharacterPerRow = text => {\r\n        if (text === null) return '';\r\n\r\n        return text.length > 40 ? `${text.substring(0, 40)}...` : text;\r\n    }\r\n\r\n    const goToDetails = login => {\r\n        history.push(`/test-github-api/#/details/${login}`);\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"card card-search\">\r\n                <div className=\"card-header\">\r\n                    Lista de organizações\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                    {!organizations.isLoading && organizations.items && (\r\n                        <Paper className={classes.root}>\r\n                            <TableContainer className={classes.container}>\r\n                                <Table stickyHeader aria-label=\"sticky table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            {columns.map((column) => (\r\n                                                <TableCell\r\n                                                    key={column.id}\r\n                                                    align={column.align}\r\n                                                    style={{ minWidth: column.minWidth }}\r\n                                                >\r\n                                                    {column.label}\r\n                                                </TableCell>\r\n                                            ))}\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {organizations.items.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                            return (\r\n                                                <TableRow\r\n                                                    hover\r\n                                                    role=\"checkbox\"\r\n                                                    tabIndex={-1}\r\n                                                    key={row.id}\r\n                                                    onClick={() => goToDetails(row.login)}\r\n                                                >\r\n                                                {columns.map((column) => {\r\n                                                    const value = row[column.id];\r\n\r\n                                                    return (\r\n                                                        <TableCell key={column.id} align={column.align}>\r\n                                                            {column.id === 'avatar_url' ? \r\n                                                                <img src={value} alt={`${row.login} logo`} />\r\n                                                            : checkMaxCharacterPerRow(value)}\r\n                                                        </TableCell>\r\n                                                    );\r\n                                                })}\r\n                                                </TableRow>\r\n                                            );\r\n                                        })}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 100]}\r\n                                component=\"div\"\r\n                                count={organizations.items.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            />\r\n                        </Paper>\r\n                    )}\r\n\r\n                    {organizations.isLoading && <LinearProgress />}\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;","export const FETCH_ORGANIZATIONS_REQUEST = \"FETCH_ORGANIZATIONS_REQUEST\";\r\nexport const FETCH_ORGANIZATIONS_SUCCESS = \"FETCH_ORGANIZATIONS_SUCCESS\";\r\nexport const FETCH_ORGANIZATIONS_FAILURE = \"FETCH_ORGANIZATIONS_FAILURE\";\r\n\r\nexport function fetchOrganizationsRequest() {\r\n    return {\r\n        type: FETCH_ORGANIZATIONS_REQUEST,\r\n    }\r\n}\r\n\r\nexport function fetchOrganizationsSuccess(organizations) {\r\n    return {\r\n        type: FETCH_ORGANIZATIONS_SUCCESS,\r\n        payload: { organizations },\r\n    }\r\n}\r\n\r\nexport function fetchOrganizationsFailure(err) {\r\n    return {\r\n        type: FETCH_ORGANIZATIONS_FAILURE,\r\n        payload: { err }       \r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    a {\r\n        color: blue;\r\n\r\n        &:hover {\r\n            color: blue;\r\n            font-weight: bold;\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Container } from './styles';\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <Container className=\"card\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Erro 404</h5>\r\n\r\n                <p className=\"card-text\">Página não encontrada</p>\r\n\r\n                <Link to=\"/\" className=\"card-link\">Clique aqui para ir para a home</Link>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Details from '../pages/Details';\r\nimport Home from '../pages/Home';\r\nimport NotFound from '../pages/NotFound';\r\n\r\nfunction Routes() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/details/:login\" component={Details} />\r\n            <Route component={NotFound} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Routes;","import { FETCH_ORGANIZATIONS_FAILURE, FETCH_ORGANIZATIONS_REQUEST, FETCH_ORGANIZATIONS_SUCCESS } from \"./actions\"\r\n\r\nconst INITIAL_STATE = { isLoading: false }\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case FETCH_ORGANIZATIONS_REQUEST:\r\n            return { isLoading: true };\r\n        case FETCH_ORGANIZATIONS_SUCCESS:\r\n            return { items: action.payload.organizations, isLoading: false };\r\n        case FETCH_ORGANIZATIONS_FAILURE:\r\n            return { ...action.payload.err, isLoading: false };\r\n        default:\r\n            return { ...state, isLoading: false };\r\n        \r\n    }\r\n}","import { FETCH_ORGANIZATION_FAILURE, FETCH_ORGANIZATION_REQUEST, FETCH_ORGANIZATION_SUCCESS } from \"./actions\"\r\n\r\nconst INITIAL_STATE = { isLoading: false }\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case FETCH_ORGANIZATION_REQUEST:\r\n            return { isLoading: true };\r\n        case FETCH_ORGANIZATION_SUCCESS:\r\n            return { items: action.payload.organization, isLoading: false };\r\n        case FETCH_ORGANIZATION_FAILURE:\r\n            return { ...action.payload.err, isLoading: false };\r\n        default:\r\n            return { ...state, isLoading: false };\r\n        \r\n    }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport organizationsReducer from './organizations/reducer';\r\nimport organizationReducer from './organization/reducer';\r\n\r\nexport default combineReducers({\r\n    organizations: organizationsReducer,\r\n    organization: organizationReducer,\r\n});","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://api.github.com',\r\n});\r\n\r\nexport default api;","import { all, call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport api from '../../../services/api';\r\nimport { fetchOrganizationsFailure, fetchOrganizationsSuccess, FETCH_ORGANIZATIONS_REQUEST } from './actions';\r\n\r\nexport function* fetchOrganizations() {\r\n    try {\r\n        const response = yield call(api.get, 'organizations');\r\n\r\n        yield put(fetchOrganizationsSuccess(response.data)); \r\n    } catch(err) {\r\n        yield put(fetchOrganizationsFailure(err));\r\n    }\r\n}\r\n\r\nexport default all([takeLatest(FETCH_ORGANIZATIONS_REQUEST, fetchOrganizations)]);","import { all, call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport api from '../../../services/api';\r\nimport { fetchOrganizationFailure, fetchOrganizationSuccess, FETCH_ORGANIZATION_REQUEST } from './actions';\r\n\r\nexport function* fetchOrganization({ payload }) {\r\n    const { login } = payload;\r\n\r\n    try {\r\n        const response = yield call(api.get, `/orgs/${login}`);\r\n        const responseRepositories = yield call(api.get, `/orgs/${login}/repos`);\r\n\r\n        yield put(fetchOrganizationSuccess({ ...response.data, repos: responseRepositories.data })); \r\n    } catch(err) {\r\n        yield put(fetchOrganizationFailure(err));\r\n    }\r\n}\r\n\r\nexport default all([takeLatest(FETCH_ORGANIZATION_REQUEST, fetchOrganization)]);","import { all } from 'redux-saga/effects';\r\n\r\nimport organizations from './organizations/sagas';\r\nimport organization from './organization/sagas';\r\n\r\nexport default function* rootSaga() {\r\n    return yield all([organizations, organization]);\r\n}","import createSagaMiddleware from 'redux-saga';\r\n\r\nimport createStore from './createStore';\r\nimport rootReducer from './modules/rootReducer';\r\nimport rootSaga from './modules/rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware({});\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\nconst store = createStore(rootReducer, middlewares);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport { store };","import { createStore, applyMiddleware } from 'redux';\r\n\r\nexport default (reducers, middlewares) => {\r\n    const enhancer = applyMiddleware(...middlewares);\r\n\r\n    return createStore(reducers, enhancer);\r\n}","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport GlobalStyles from './styles/global';\nimport Routes from './routes';\nimport history from './services/history';\nimport { store } from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter basename=\"/\" history={history}>\n        <div className=\"App\">\n          <Routes />\n\n          <GlobalStyles />\n        </div>\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}